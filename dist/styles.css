@import url("https://fonts.googleapis.com/css2?family=Lato&family=Roboto&display=swap");
/* global styles */
*::after,
*::before,
body {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
  font-family: "Lato", sans-serif;
}
/* body styles */
body {
  min-height: 100vh;
  min-width: 100vw;
  display: grid;
  grid-template: 100px 6fr/250px 8fr;
}
/* header styles */
header {
  grid-area: 1/1/2/-1;
  font-size: 50px;
  display: flex;
  align-items: center;
  gap: 10px;
  padding-left: 30px;
  background-color: #333;
  color: white;
}
header img {
  height: 50%;
}
/* nav & project styles */
nav {
  background-color: #ddd;
  padding: 20px;
  display: flex;
  flex-direction: column;
}
nav .fixed,
nav .generated-projects {
  display: flex;
  flex-direction: column;
  align-items: center;
}

nav .project-head {
  font-size: 30px;
  padding: 20px;
}
nav .fixed .project,
nav .generated-projects .project,
.project.add {
  width: 100%;
  padding: 10px;
  padding-left: 20px;
  display: flex;
  gap: 10px;
  align-items: center;
  background: none;
  border: none;
  border-radius: 5px;
  font-size: 20px;
}

nav .text {
  overflow: hidden;
  white-space: nowrap;
}

nav .generated-projects #close {
  display: none;
  margin-left: auto;
}
nav .generated-projects:hover #close {
  display: block;
}
nav .fixed .project:hover,
nav .generated-projects .project:hover,
.project.add:hover,
.task:hover {
  background-color: rgb(0, 0, 0, 0.2);
}
.project:focus:not(.add) {
  background-color: rgb(0, 0, 0, 0.2);
}
.generated-projects .project img:last-child {
  margin-left: auto;
}
.addProject #projectTitle {
  width: 200px;
  height: 30px;
  margin: 0 10px 10px 10px;
  border: 1px solid black;
  border-radius: 2px;
  font-size: 24px;
}
.addProject {
  display: none;
  margin-bottom: 20px;
}
.addProject input {
  margin-right: auto;
}
.addProject.active {
  display: flex;
  flex-direction: column;
  align-items: center;
}
.projectBtns {
  display: flex;
  justify-content: center;
  gap: 5px;
}

/* main & Task styles */
main {
  display: flex !important;
  justify-content: center;
  align-content: center;
  background-color: #eee;
  min-width: calc(100vw - 250px);
}
.content-container {
  flex: 1;
  min-width: calc(100vw - 250px);
}
main .project-header {
  font-size: 30px;
  padding: 20px 40px;
  font-weight: bold;
  overflow: hidden;
}
.generated-tasks {
  margin: 10px;
  display: flex;
  flex-direction: column;

  margin: 0 40px;
  gap: 5px;
}
.add.task {
  margin-left: 40px;
  max-width: 50%;
}
.task {
  display: grid;
  justify-items: start;
  gap: 20px;
  padding: 10px;
  width: 100%;
  display: flex;
  gap: 10px;
  align-items: center;
  background: none;
  border: none;
  border-radius: 5px;
  font-size: 24px;
}
.taskButtons {
  display: flex;
  gap: 5px;
}

.taskButtons {
  display: flex;
  padding: 0;
}

.duedate {
  margin-left: auto;
  font-size: 20px;
  white-space: nowrap;
}
.taskButtons button:hover {
  text-decoration: underline;
}
.taskButtons button {
  border-radius: 5px;
  border: none;
  background: transparent;
  font-size: 20px;
}
.Low {
  border-left: 5px green solid !important;
}
.Medium {
  border-left: 5px orange solid !important;
}
.High {
  border-left: 5px red solid !important;
}
.task-title {
  overflow: hidden;
}
.task.done {
  text-decoration: line-through;
}
.task-title:hover {
  text-decoration: underline;
}

.task input[type="checkbox"] {
  margin-left: 4px;
  margin-right: 5px;
}
/* overlay styles */
#overlay {
  position: fixed;
  transition: 200ms ease-in-out;
  opacity: 0;
  left: 0;
  right: 0;
  top: 0;
  bottom: 0;
  background-color: rgba(0, 0, 0, 0.5);
  pointer-events: none;
}
#overlay.active {
  opacity: 1;
  pointer-events: all;
}
/* modal styles */
.modal {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%) scale(0);
  transition: 200ms ease-in-out;
  border: 1px solid black;
  z-index: 10;
  background-color: silver;
  width: 400px;
  height: 450px;
  border-radius: 10px;
}
.modal.active {
  transform: translate(-50%, -50%) scale(1);
}
/* form styles */
form {
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  padding: 20px;
  max-width: 100%;
  max-height: 100%;
}
#taskSubmit,
#editSubmitTask,
#cancelTask,
#projectSubmit,
#cancelProject {
  background-color: #36e730f3;
  border: 1px solid black;
  border-radius: 5px;
  padding: 5px 10px;
  font-size: 24px;
  align-self: center;
  margin-top: 20px;
  font-weight: bold;
}

#projectSubmit,
#cancelProject {
  margin-top: 0px;
  width: 90px;
  font-size: 18px;
}
#editSubmitTask {
  display: none;
  padding: 5px 25px;
}
#taskSubmit:hover,
#editSubmitTask:hover,
#cancelTask:hover,
#projectSubmit:hover {
  filter: brightness(90%);
}
#addTask[data-project-id="week"],
#addTask[data-project-id="today"] {
  display: none;
}
#cancelTask,
#cancelProject {
  background-color: rgb(255, 95, 95);
}
.buttons {
  display: flex;
  align-self: center;
  gap: 30px;
}

form div {
  display: flex;
  padding: 5px;
  max-width: 80%;
  padding: 10px;
  gap: 10px;
}
textarea {
  width: 200px;
  height: 100px;
  resize: none;
}

form label {
  font-size: 18px;
}
form .head {
  font-size: 36px;
  font-weight: bold;
}
.head img:hover {
  opacity: 0.5;
}

/* checkbox styles library from modern css site */
input[type="checkbox"] {
  /* Add if not using autoprefixer */
  -webkit-appearance: none;
  /* Remove most all native input styles */
  appearance: none;
  /* For iOS < 15 */
  background-color: var(--form-background);
  /* Not removed via appearance */
  margin-top: 7px;

  font: inherit;
  color: currentColor;
  width: 0.9em;
  height: 0.9em;
  border: 0.15em solid currentColor;
  border-radius: 0.15em;
  transform: translateY(-0.075em);
  display: grid;
  place-content: center;
}

input[type="checkbox"]::before {
  content: "";
  width: 0.6em;
  height: 0.6em;
  clip-path: polygon(14% 44%, 0 65%, 50% 100%, 100% 16%, 80% 0%, 43% 62%);
  transform: scale(0);
  transform-origin: bottom left;
  transition: 120ms transform ease-in-out;
  box-shadow: inset 1em 1em var(--form-control-color);
  /* Windows High Contrast Mode */
  background-color: CanvasText;
}

input[type="checkbox"]:checked::before {
  transform: scale(1);
}
